// ==============================================
// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ÂÖ®Â±Ä
// ==============================================
let accounts = [];
let currentAccount = null;
let records = [];
let editingIndex = null;
let accountTypes = new Map();
let tempTypeValue = '';
let backupPassword = null;
let summaryContext = {};
let singleDateExportContext = {}; 
let dateRangeExportContext = {};

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Toast Notification
// ==============================================

function showToast(message, type = 'info') {
    const toast = document.getElementById('toast');
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    let backgroundColor = '#007bff'; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    switch(type) {
        case 'success':
            backgroundColor = '#28a745';
            break;
        case 'error':
            backgroundColor = '#dc3545';
            break;
        case 'warning':
            backgroundColor = '#ffc107';
            break;
        case 'info':
        default:
            backgroundColor = '#007bff';
            break;
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏µ
    toast.textContent = message;
    toast.style.backgroundColor = backgroundColor;
    
    // ‡πÅ‡∏™‡∏î‡∏á toast
    toast.className = "toast-notification show";
    
    // ‡∏ã‡πà‡∏≠‡∏ô toast ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setTimeout(function() {
        toast.className = toast.className.replace("show", "");
    }, 3000);
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
// ==============================================

function toggleMainSection(sectionId) { 
    console.log('toggleMainSection called:', sectionId);
    
    const section = document.getElementById(sectionId);
    if (!section) {
        console.error('Section not found:', sectionId);
        return;
    }
    
    const header = section.previousElementSibling;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isCurrentlyActive = section.classList.contains('active');
    
    // ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    const allMainSections = document.querySelectorAll('.main-section-content');
    const allMainHeaders = document.querySelectorAll('.main-section-header');
    
    allMainSections.forEach(section => {
        section.classList.remove('active');
    });
    
    allMainHeaders.forEach(header => {
        header.classList.remove('active');
    });
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏°‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô)
    if (!isCurrentlyActive) {
        section.classList.add('active');
        if (header) header.classList.add('active');
    }
}

function toggleSubSection(sectionId) {
    console.log('toggleSubSection called:', sectionId);
    
    const section = document.getElementById(sectionId);
    if (!section) {
        console.error('Sub-section not found:', sectionId);
        return;
    }
    
    const header = section.previousElementSibling;
    
    section.classList.toggle('active');
    if (header) header.classList.toggle('active');
}

function closeAllMainSections() {
    const allMainSections = document.querySelectorAll('.main-section-content');
    const allMainHeaders = document.querySelectorAll('.main-section-header');
    
    allMainSections.forEach(section => {
        section.classList.remove('active');
    });
    
    allMainHeaders.forEach(header => {
        header.classList.remove('active');
    });
}

function toggleSection(sectionId) {
    toggleMainSection(sectionId);
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Modal
// ==============================================

function openSummaryModal(htmlContent) {
    const modal = document.getElementById('summaryModal');
    const modalBody = document.getElementById('modalBodyContent');
    modalBody.innerHTML = htmlContent;
    modal.style.display = 'flex';
    setupSummaryControlsAndSave();
    showToast("üìä ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'info');
}

function closeSummaryModal() { 
    const modal = document.getElementById('summaryModal'); 
    modal.style.display = 'none'; 
}

function openExportOptionsModal() { 
    document.getElementById('exportOptionsModal').style.display = 'flex'; 
    showToast("üíæ ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'info');
}

function closeExportOptionsModal() { 
    document.getElementById('exportOptionsModal').style.display = 'none'; 
}

function closeSingleDateExportModal() { 
    document.getElementById('singleDateExportModal').style.display = 'none'; 
}

function closeSingleDateExportFormatModal() { 
    document.getElementById('singleDateExportFormatModal').style.display = 'none'; 
}

function closeFormatModal() { 
    document.getElementById('formatSelectionModal').style.display = 'none'; 
}

function closeExportSingleAccountModal() { 
    document.getElementById('exportSingleAccountModal').style.display = 'none'; 
}

function openSummaryOutputModal() { 
    document.getElementById('summaryOutputModal').style.display = 'flex'; 
}

function closeSummaryOutputModal() { 
    document.getElementById('summaryOutputModal').style.display = 'none'; 
    summaryContext = {}; 
}

function closeDateRangeExportModal() {
    document.getElementById('dateRangeExportModal').style.display = 'none';
    dateRangeExportContext = {};
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Summary Modal
// ==============================================

function setupSummaryControlsAndSave() {
    const modalContentContainer = document.querySelector("#summaryModal .modal-content-container");
    const modalBody = document.getElementById("modalBodyContent");
    if (!modalBody || !modalContentContainer) return;

    // --- Font Size Controls ---
    const textElements = modalBody.querySelectorAll('p, h4, strong, th, td, span, div');
    const fsSlider = document.getElementById("summaryFontSizeSlider");
    const fsValueSpan = document.getElementById("summaryFontSizeValue");

    textElements.forEach(el => {
        if (!el.dataset.originalSize) {
            el.dataset.originalSize = parseFloat(window.getComputedStyle(el).fontSize);
        }
    });

    function updateFontSize() {
        const scale = fsSlider.value;
        textElements.forEach(el => {
            const originalSize = parseFloat(el.dataset.originalSize);
            if (originalSize) {
                el.style.fontSize = (originalSize * scale) + 'px';
            }
        });
        fsValueSpan.textContent = "‡∏Ç‡∏ô‡∏≤‡∏î: " + Math.round(scale * 100) + "%";
    }
    
    fsSlider.removeEventListener("input", updateFontSize);
    fsSlider.addEventListener("input", updateFontSize);

    // --- Line Height Controls ---
    const lhSlider = document.getElementById("summaryLineHeightSlider");
    const lhValueSpan = document.getElementById("summaryLineHeightValue");

    function updateLineHeight() {
        const lineHeight = lhSlider.value;
        modalBody.style.lineHeight = lineHeight;
        lhValueSpan.textContent = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: " + lineHeight;
    }
    
    lhSlider.removeEventListener("input", updateLineHeight);
    lhSlider.addEventListener("input", updateLineHeight);
    
    // --- Save as Image Button Logic ---
    const saveBtn = document.getElementById("saveSummaryAsImageBtn");
    const newSaveBtn = saveBtn.cloneNode(true);
    saveBtn.parentNode.replaceChild(newSaveBtn, saveBtn);

    newSaveBtn.addEventListener("click", function() {
        const controlsElement = modalContentContainer.querySelector('.modal-controls');
        
        if (controlsElement) controlsElement.style.display = 'none';
        modalContentContainer.style.padding = '5px 2px';

        html2canvas(modalContentContainer, {
            useCORS: true,
            scale: 4,
            backgroundColor: '#FAFAD2'
        }).then(canvas => {
            const link = document.createElement('a');
            const fileName = `‡∏™‡∏£‡∏∏‡∏õ_${currentAccount || 'account'}_${Date.now()}.png`;
            link.download = fileName;
            link.href = canvas.toDataURL("image/png");
            link.click();
            showToast(`üñºÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô "${fileName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        }).catch(err => {
            console.error("Error creating image:", err);
            showToast("‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢, ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ", 'error');
        }).finally(() => {
            if (controlsElement) controlsElement.style.display = '';
            modalContentContainer.style.padding = '';
        });
    });        
    
    updateFontSize();
    updateLineHeight();
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
// ==============================================

function addAccount() { 
    const accountName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà:");
    if (accountName && !accounts.includes(accountName)) { 
        accounts.push(accountName); 
        updateAccountSelect(); 
        updateMultiAccountSelector(); 
        showToast(`‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${accountName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        saveToLocal(); 
    } else { 
        showToast("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 'error'); 
    } 
}

function updateAccountSelect() { 
    const accountSelect = document.getElementById('accountSelect'); 
    accountSelect.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</option>'; 
    accounts.forEach(account => { 
        const option = document.createElement('option'); 
        option.value = account; 
        option.textContent = account; 
        accountSelect.appendChild(option); 
    }); 
}

function changeAccount() {
    currentAccount = document.getElementById('accountSelect').value;
    document.getElementById('accountName').textContent = currentAccount || "";
    updateTypeList();
    displayRecords();
    updateMultiAccountSelector();
    updateImportAccountSelect();
    
    if (currentAccount) {
        const accountRecords = records.filter(record => record.account === currentAccount);
        console.log(`Loaded ${accountRecords.length} records for account: ${currentAccount}`);
        showToast(`üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${accountRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`, 'success');
    }
}

function editAccount() { 
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", 'error'); 
        return; 
    } 
    const newAccountName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà:", currentAccount); 
    if (newAccountName && newAccountName !== currentAccount && !accounts.includes(newAccountName)) { 
        const oldAccountName = currentAccount; 
        const index = accounts.indexOf(oldAccountName); 
        if (index > -1) { 
            accounts[index] = newAccountName; 
            records.forEach(record => { 
                if (record.account === oldAccountName) { 
                    record.account = newAccountName; 
                } 
            }); 
            if (accountTypes.has(oldAccountName)) { 
                const oldTypes = accountTypes.get(oldAccountName); 
                accountTypes.set(newAccountName, oldTypes); 
                accountTypes.delete(oldAccountName); 
            } 
            currentAccount = newAccountName; 
            updateAccountSelect(); 
            document.getElementById('accountSelect').value = newAccountName; 
            document.getElementById('accountName').textContent = currentAccount; 
            displayRecords(); 
            updateMultiAccountSelector(); 
            showToast(`‚úì ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏õ‡πá‡∏ô "${newAccountName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success'); 
            saveToLocal(); 
        } 
    } else { 
        showToast("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 'error'); 
    } 
}

function deleteAccount() { 
    if (currentAccount) { 
        const confirmDelete = confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`); 
        if (confirmDelete) { 
            const accountToDelete = currentAccount; 
            const index = accounts.indexOf(accountToDelete); 
            if (index > -1) { 
                accounts.splice(index, 1); 
            } 
            accountTypes.delete(accountToDelete); 
            records = records.filter(rec => rec.account !== accountToDelete); 
            currentAccount = null; 
            document.getElementById('accountSelect').value = ""; 
            document.getElementById('accountName').textContent = ""; 
            updateAccountSelect(); 
            displayRecords(); 
            updateMultiAccountSelector(); 
            showToast(`‚úì ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${accountToDelete}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success'); 
            saveToLocal(); 
        } 
    } else { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", 'error'); 
    } 
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
// ==============================================

function initializeAccountTypes(accountName) { 
    if (!accountTypes.has(accountName)) { 
        accountTypes.set(accountName, { 
            "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": ["‡∏ñ‡∏π‡∏Å‡∏´‡∏ß‡∏¢", "‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏∏‡∏ô"], 
            "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": ["‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢", "‡πÇ‡∏≠‡∏ô‡∏Å‡∏≥‡πÑ‡∏£", "‡∏ä‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß"] 
        }); 
    } 
}

function updateTypeList() { 
    const typeList = document.getElementById('typeList'); 
    const typeInput = document.getElementById('type');
    
    if (!currentAccount) { 
        typeList.innerHTML = ''; 
        typeInput.value = '';
        return; 
    } 
    
    initializeAccountTypes(currentAccount); 
    const types = accountTypes.get(currentAccount); 
    typeList.innerHTML = ''; 
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
    types["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].forEach(type => { 
        const option = document.createElement('option'); 
        option.value = type; 
        option.textContent = type; 
        typeList.appendChild(option); 
    }); 
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
    types["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].forEach(type => { 
        const option = document.createElement('option'); 
        option.value = type; 
        option.textContent = type; 
        typeList.appendChild(option); 
    }); 
    
    console.log('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:', types);
}

function showAllTypes(inputElement) { 
    tempTypeValue = inputElement.value; 
    inputElement.value = ''; 
}

function restoreType(inputElement) { 
    if (inputElement.value === '') { 
        inputElement.value = tempTypeValue; 
    } 
}

function addNewType() { 
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 'error'); 
        return; 
    } 
    
    initializeAccountTypes(currentAccount); 
    const types = accountTypes.get(currentAccount); 
    
    // ‡πÉ‡∏ä‡πâ prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å input
    const typeName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà:"); 
    if (!typeName || typeName.trim() === '') {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 'error');
        return;
    }
    
    const category = prompt("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢):"); 
    if (category !== "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö" && category !== "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢") { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", 'error'); 
        return; 
    } 
    
    const trimmedTypeName = typeName.trim();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (types[category].includes(trimmedTypeName)) { 
        showToast(`‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${trimmedTypeName}" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î "${category}"`, 'error'); 
        return; 
    } 
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà
    types[category].push(trimmedTypeName); 
    updateTypeList(); 
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô input
    document.getElementById('type').value = trimmedTypeName;
    
    showToast(`‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${trimmedTypeName}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î "${category}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success'); 
    saveToLocal(); 
}

function editType() { 
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 'error'); 
        return; 
    } 
    
    initializeAccountTypes(currentAccount); 
    const types = accountTypes.get(currentAccount); 
    const typeInput = document.getElementById('type'); 
    const currentType = typeInput.value.trim(); 
    
    if (!currentType) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", 'error'); 
        return; 
    } 
    
    // ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    let foundCategory = null; 
    for (const category in types) { 
        if (types[category].includes(currentType)) { 
            foundCategory = category; 
            break; 
        } 
    } 
    
    if (!foundCategory) { 
        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", 'error'); 
        return; 
    } 
    
    const newName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà:", currentType); 
    if (!newName || newName.trim() === '') {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà", 'error');
        return;
    }
    
    const trimmedNewName = newName.trim();
    if (trimmedNewName === currentType) {
        showToast("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°", 'error');
        return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    for (const category in types) {
        if (types[category].includes(trimmedNewName)) {
            showToast(`‚ùå ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${trimmedNewName}" ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`, 'error');
            return;
        }
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const index = types[foundCategory].indexOf(currentType);
    types[foundCategory][index] = trimmedNewName;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏ô records
    records.forEach(record => { 
        if (record.account === currentAccount && record.type === currentType) { 
            record.type = trimmedNewName; 
        } 
    }); 
    
    updateTypeList(); 
    typeInput.value = trimmedNewName; 
    showToast(`‚úì ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏õ‡πá‡∏ô "${trimmedNewName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success'); 
    saveToLocal(); 
}

function deleteType() { 
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 'error'); 
        return; 
    } 
    
    initializeAccountTypes(currentAccount); 
    const types = accountTypes.get(currentAccount); 
    const typeInput = document.getElementById('type'); 
    const currentType = typeInput.value.trim(); 
    
    if (!currentType) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", 'error'); 
        return; 
    } 
    
    // ‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    let foundCategory = null; 
    for (const category in types) { 
        if (types[category].includes(currentType)) { 
            foundCategory = category; 
            break; 
        } 
    } 
    
    if (!foundCategory) { 
        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", 'error'); 
        return; 
    } 
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡πÉ‡∏ô records ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const usedInRecords = records.some(record => 
        record.account === currentAccount && record.type === currentType
    );
    
    if (usedInRecords) {
        const confirmDelete = confirm(`‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${currentType}" ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô ${records.filter(r => r.account === currentAccount && r.type === currentType).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`); 
        if (!confirmDelete) return;
    } else {
        const confirmDelete = confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${currentType}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`); 
        if (!confirmDelete) return;
    }
    
    // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const index = types[foundCategory].indexOf(currentType);
    types[foundCategory].splice(index, 1);
    
    updateTypeList(); 
    typeInput.value = ''; 
    showToast(`‚úì ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${currentType}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success'); 
    saveToLocal(); 
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
function showTypeManagement() {
    if (!currentAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô", 'error');
        return;
    }
    
    initializeAccountTypes(currentAccount);
    const types = accountTypes.get(currentAccount);
    
    let typeListHTML = `
        <h3>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó - ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${currentAccount}</h3>
        <div style="display: flex; gap: 20px;">
            <div>
                <h4>‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</h4>
                <ul id="incomeTypesList" style="min-height: 100px; border: 1px solid #ccc; padding: 10px;">
    `;
    
    types["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].forEach(type => {
        typeListHTML += `<li>${type} <button onclick="quickDeleteType('‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', '${type}')">‡∏•‡∏ö</button></li>`;
    });
    
    typeListHTML += `
                </ul>
                <button onclick="quickAddType('‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö')">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</button>
            </div>
            <div>
                <h4>‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</h4>
                <ul id="expenseTypesList" style="min-height: 100px; border: 1px solid #ccc; padding: 10px;">
    `;
    
    types["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].forEach(type => {
        typeListHTML += `<li>${type} <button onclick="quickDeleteType('‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', '${type}')">‡∏•‡∏ö</button></li>`;
    });
    
    typeListHTML += `
                </ul>
                <button onclick="quickAddType('‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢')">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</button>
            </div>
        </div>
    `;
    
    openSummaryModal(typeListHTML);
}

function quickAddType(category) {
    const typeName = prompt(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó${category}:`);
    if (!typeName || typeName.trim() === '') return;
    
    const trimmedTypeName = typeName.trim();
    initializeAccountTypes(currentAccount);
    const types = accountTypes.get(currentAccount);
    
    if (types[category].includes(trimmedTypeName)) {
        showToast("‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", 'error');
        return;
    }
    
    types[category].push(trimmedTypeName);
    updateTypeList();
    saveToLocal();
    
    showToast(`‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${trimmedTypeName}" ‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î "${category}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä modal
    showTypeManagement();
}

function quickDeleteType(category, typeName) {
    if (!confirm(`‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${typeName}" ‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏ß‡∏î "${category}"?`)) return;
    
    initializeAccountTypes(currentAccount);
    const types = accountTypes.get(currentAccount);
    const index = types[category].indexOf(typeName);
    
    if (index > -1) {
        types[category].splice(index, 1);
        updateTypeList();
        saveToLocal();
        
        showToast(`‚úì ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "${typeName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä modal
        showTypeManagement();
    }
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
// ==============================================

function addEntry() {
    let entryDateInput = document.getElementById('entryDate').value;
    let entryTimeInput = document.getElementById('entryTime').value;
    const typeInput = document.getElementById('type');
    const typeText = typeInput.value.trim();
    const description = document.getElementById('description').value;
    const amount = parseFloat(document.getElementById('amount').value);
    let datePart, timePart;
    
    if (!entryDateInput || !entryTimeInput) {
        const now = new Date();
        const y = now.getFullYear();
        const m = String(now.getMonth() + 1).padStart(2, '0');
        const d = String(now.getDate()).padStart(2, '0');
        datePart = !entryDateInput ? `${y}-${m}-${d}` : entryDateInput;
        const hh = String(now.getHours()).padStart(2, '0');
        const mm = String(now.getMinutes()).padStart(2, '0');
        timePart = !entryTimeInput ? `${hh}:${mm}` : entryTimeInput;
    } else {
        datePart = entryDateInput;
        timePart = entryTimeInput;
    }
    
    const dateTime = `${datePart} ${timePart}`;
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", 'error'); 
        return; 
    }
    if (!typeText) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", 'error'); 
        return; 
    }
    if (!description) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", 'error'); 
        return; 
    }
    if (isNaN(amount) || amount <= 0) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 'error'); 
        return; 
    }
    
    initializeAccountTypes(currentAccount);
    const types = accountTypes.get(currentAccount);
    let entryCategory = 'expense';
    if (types["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].includes(typeText)) {
        entryCategory = 'income';
    }
    
    if (editingIndex !== null) {
        records[editingIndex] = { dateTime, type: typeText, description, amount, account: currentAccount };
        editingIndex = null;
        showToast(`‚úì ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "${description}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
    } else {
        records.push({ dateTime, type: typeText, description, amount, account: currentAccount });
        const selectedCheckboxes = document.querySelectorAll('#multiAccountCheckboxes input:checked');
        selectedCheckboxes.forEach(checkbox => {
            const targetAccount = checkbox.value;
            records.push({ dateTime, type: typeText, description, amount, account: targetAccount });
        });
        
        if (selectedCheckboxes.length > 0) {
            showToast(`‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "${description}" ‡πÉ‡∏ô ${selectedCheckboxes.length + 1} ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        } else {
            showToast(`‚úì ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "${description}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        }
    }
    
    displayRecords();
    document.getElementById('description').value = '';
    document.getElementById('amount').value = '';
    document.getElementById('entryDate').value = '';
    document.getElementById('entryTime').value = '';
    typeInput.value = '';
    document.querySelectorAll('#multiAccountCheckboxes input:checked').forEach(checkbox => {
        checkbox.checked = false;
    });
    saveDataAndShowToast(entryCategory);
    updateMultiAccountSelector();
}

function displayRecords() { 
    const recordBody = document.getElementById('recordBody'); 
    recordBody.innerHTML = ""; 
    const filteredRecords = records.filter(record => record.account === currentAccount) 
    .sort((a, b) => parseLocalDateTime(b.dateTime) - parseLocalDateTime(a.dateTime)); 
    
    filteredRecords.forEach((record, index) => { 
        const originalIndex = records.findIndex(r => r === record); 
        const { formattedDate, formattedTime } = formatDateForDisplay(record.dateTime);
        
        const row = document.createElement('tr'); 
        row.innerHTML = ` 
        <td>${formattedDate}</td> 
        <td>${formattedTime}</td> 
        <td>${record.type}</td> 
        <td>${record.description}</td> 
        <td>${record.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</td> 
        <td> 
        <button onclick="editRecord(${originalIndex})">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button> 
        <button onclick="deleteRecord(${originalIndex})">‡∏•‡∏ö</button> 
        </td> 
        `; 
        recordBody.appendChild(row); 
    }); 
    
    if (filteredRecords.length === 0) { 
        const row = document.createElement('tr'); 
        row.innerHTML = `<td colspan="6" style="text-align: center;">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>`; 
        recordBody.appendChild(row); 
    } 
}

function editRecord(index) {
    const record = records[index];
    document.getElementById('type').value = record.type;
    document.getElementById('description').value = record.description;
    document.getElementById('amount').value = record.amount;
    const [datePart, timePart] = record.dateTime.split(' ');
    document.getElementById('entryDate').value = datePart;
    document.getElementById('entryTime').value = timePart;
    editingIndex = index;
    updateMultiAccountSelector();
    showToast("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...", 'info');
}

function deleteRecord(index) { 
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) { 
        const record = records[index];
        records.splice(index, 1); 
        displayRecords(); 
        showToast(`‚úì ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ "${record.description}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        saveDataAndShowToast(); 
    } 
}

function toggleRecordsVisibility() { 
    const detailsSection = document.getElementById('detailsSection'); 
    if (detailsSection.style.display === 'none' || detailsSection.style.display === '') { 
        detailsSection.style.display = 'block'; 
        showToast("üìã ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'success');
    } else { 
        detailsSection.style.display = 'none'; 
        showToast("üìã ‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'info');
    } 
}

function deleteRecordsByDate() {
    const dateInput = document.getElementById('deleteByDateInput');
    const selectedDate = dateInput.value;
    if (!currentAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô", 'error');
        return;
    }
    if (!selectedDate) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 'error');
        return;
    }
    
    const recordsToDelete = records.filter(record => {
        if (record.account !== currentAccount) return false;
        const recordDateOnly = record.dateTime.split(' ')[0];
        return recordDateOnly === selectedDate;
    });
    
    if (recordsToDelete.length === 0) {
        showToast(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate}`, 'error');
        return;
    }
    
    const confirmDelete = confirm(
        `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${recordsToDelete.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate} ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}"?\n\n*** ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ! ***`
    );
    
    if (confirmDelete) {
        records = records.filter(record => !recordsToDelete.includes(record));
        displayRecords();
        saveDataAndShowToast();
        showToast(`‚úì ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${recordsToDelete.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
        dateInput.value = ''; 
    }
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
// ==============================================

function updateMultiAccountSelector() { 
    const selectorDiv = document.getElementById('multiAccountSelector'); 
    const checkboxesDiv = document.getElementById('multiAccountCheckboxes'); 
    checkboxesDiv.innerHTML = ''; 
    if (accounts.length > 1 && editingIndex === null) { 
        selectorDiv.style.display = 'block'; 
        accounts.forEach(acc => { 
            if (acc !== currentAccount) { 
                const itemDiv = document.createElement('div'); 
                itemDiv.className = 'checkbox-item'; 
                const checkbox = document.createElement('input'); 
                checkbox.type = 'checkbox'; 
                checkbox.id = `acc-check-${acc}`; 
                checkbox.value = acc; 
                const label = document.createElement('label'); 
                label.htmlFor = `acc-check-${acc}`; 
                label.textContent = acc; 
                itemDiv.appendChild(checkbox); 
                itemDiv.appendChild(label); 
                checkboxesDiv.appendChild(itemDiv); 
            } 
        }); 
    } else { 
        selectorDiv.style.display = 'none'; 
    } 
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô
// ==============================================

function updateImportAccountSelect() {
    const importSelect = document.getElementById('importAccountSelect');
    const importButton = document.querySelector('#import-from-account-section button');
    importSelect.innerHTML = '';
    const otherAccounts = accounts.filter(acc => acc !== currentAccount);
    
    if (otherAccounts.length === 0 || !currentAccount) {
        importSelect.innerHTML = '<option value="">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</option>';
        importSelect.disabled = true;
        if (importButton) importButton.disabled = true;
    } else {
        importSelect.disabled = false;
        if (importButton) importButton.disabled = false;
        importSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ --</option>';
        otherAccounts.forEach(acc => {
            const option = document.createElement('option');
            option.value = acc;
            option.textContent = acc;
            importSelect.appendChild(option);
        });
    }
}

function importEntriesFromAccount() {
    const sourceAccount = document.getElementById('importAccountSelect').value;
    const importDateStr = document.getElementById('importDate').value;

    if (!currentAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á) ‡∏Å‡πà‡∏≠‡∏ô", 'error');
        return;
    }
    if (!sourceAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 'error');
        return;
    }
    if (!importDateStr) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á", 'error');
        return;
    }

    const recordsToImport = records.filter(record => {
        return record.account === sourceAccount && record.dateTime.startsWith(importDateStr);
    });

    if (recordsToImport.length === 0) {
        showToast(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${sourceAccount}" ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${importDateStr}`, 'error');
        return;
    }

    const confirmImport = confirm(`‡∏û‡∏ö ${recordsToImport.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${sourceAccount}" ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${importDateStr}\n\n‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°)`);

    if (confirmImport) {
        let importedCount = 0;
        let skippedCount = 0;
        recordsToImport.forEach(recordToAdd => {
            const isDuplicate = records.some(existingRecord => 
                existingRecord.account === currentAccount &&
                existingRecord.dateTime === recordToAdd.dateTime &&
                existingRecord.amount === recordToAdd.amount &&
                existingRecord.description === recordToAdd.description &&
                existingRecord.type === recordToAdd.type
            );
            if (!isDuplicate) {
                const newEntry = { ...recordToAdd, account: currentAccount };
                records.push(newEntry);
                importedCount++;
            } else {
                skippedCount++;
            }
        });
        displayRecords();
        saveDataAndShowToast();
        showToast(`‚úì ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏° ${importedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà, ‡∏Ç‡πâ‡∏≤‡∏° ${skippedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô`, 'success');
    }
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
// ==============================================

function parseDateInput(dateStr) {
    if (!dateStr || !/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) {
        return null;
    }
    const [year, month, day] = dateStr.split('-');
    return new Date(year, month - 1, day);
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Time Zone
// ==============================================

function parseLocalDateTime(dateTimeStr) {
    if (!dateTimeStr) return new Date();
    
    try {
        const [datePart, timePart] = dateTimeStr.split(' ');
        const [year, month, day] = datePart.split('-').map(Number);
        const [hours, minutes] = timePart.split(':').map(Number);
        
        return new Date(year, month - 1, day, hours, minutes);
    } catch (error) {
        console.error('Error parsing date:', dateTimeStr, error);
        return new Date();
    }
}

function formatDateForDisplay(dateTimeStr) {
    const date = parseLocalDateTime(dateTimeStr);
    const formattedDate = `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
    const formattedTime = `${String(date.getHours()).padStart(2, '0')}.${String(date.getMinutes()).padStart(2, '0')} ‡∏ô.`;
    return { formattedDate, formattedTime };
}

function generateSummaryData(startDate, endDate) {
    if (!currentAccount) { 
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 'error'); 
        return null; 
    }
    
    if (!accountTypes.has(currentAccount)) {
        console.log(`‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${currentAccount}`);
        initializeAccountTypes(currentAccount);
    }
    
    const summary = { 
        income: {}, 
        expense: {}, 
        totalIncome: 0, 
        totalExpense: 0, 
        incomeCount: 0, 
        expenseCount: 0 
    };
    
    const periodRecords = []; 
    let totalBalance = 0; 
    const accountSpecificTypes = accountTypes.get(currentAccount);
    
    console.log(`üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${currentAccount}`);
    console.log(`üìÖ ‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${startDate} ‡∏ñ‡∏∂‡∏á ${endDate}`);
    
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î)
    records.forEach(record => {
        if (record.account !== currentAccount) return;
        
        const recordDate = parseLocalDateTime(record.dateTime);
        if (recordDate <= endDate) {
            if (accountSpecificTypes["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].includes(record.type)) { 
                totalBalance += record.amount; 
            } else if (accountSpecificTypes["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].includes(record.type)) { 
                totalBalance -= record.amount; 
            }
        }
    });
    
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    records.forEach(record => {
        if (record.account !== currentAccount) return;
        
        const recordDate = parseLocalDateTime(record.dateTime);
        if (!(recordDate >= startDate && recordDate <= endDate)) return;
        
        periodRecords.push(record);
        
        if (accountSpecificTypes["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].includes(record.type)) {
            summary.totalIncome += record.amount; 
            summary.incomeCount++;
            
            if (!summary.income[record.type]) {
                summary.income[record.type] = { amount: 0, count: 0 };
            }
            summary.income[record.type].amount += record.amount; 
            summary.income[record.type].count++;
            
        } else if (accountSpecificTypes["‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"].includes(record.type)) {
            summary.totalExpense += record.amount; 
            summary.expenseCount++;
            
            if (!summary.expense[record.type]) {
                summary.expense[record.type] = { amount: 0, count: 0 };
            }
            summary.expense[record.type].amount += record.amount; 
            summary.expense[record.type].count++;
        }
    });
    
    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    periodRecords.sort((a, b) => parseLocalDateTime(a.dateTime) - parseLocalDateTime(b.dateTime));
    
    console.log(`‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${periodRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö: ${summary.totalIncome}, ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢: ${summary.totalExpense}`);
    
    return { summary, periodRecords, totalBalance };
}

function buildOriginalSummaryHtml(context) {
    const { summaryResult, title, dateString, remark, transactionDaysInfo, type, thaiDateString, headerLine1, headerLine2, headerLine3 } = context;
    const { summary, periodRecords, totalBalance } = summaryResult;
    
    let incomeHTML = ''; 
    for (const type in summary.income) { 
        incomeHTML += `<p>- ${type} : ${summary.income[type].count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.income[type].amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>`; 
    }
    
    let expenseHTML = ''; 
    for (const type in summary.expense) { 
        expenseHTML += `<p>- ${type} : ${summary.expense[type].count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.expense[type].amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>`; 
    }
    
    let recordsHTML = '';
    if ((type === 'today' || type === 'byDayMonth') && periodRecords.length > 0) {
        recordsHTML = ` 
        <div style="margin-top: 20px;"> 
        <h4 style="border-bottom: 1px solid #ddd; padding-bottom: 5px;">${headerLine3}</h4> 
        <table style="width: 100%; border-collapse: collapse; margin-top: 10px;"> 
        <thead><tr style="background-color: #f2f2f2;">
        <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">‡πÄ‡∏ß‡∏•‡∏≤</th>
        <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
        <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th style="padding: 8px; border: 1px solid #ddd; text-align: center;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
        </tr></thead> 
        <tbody> 
        ${periodRecords.map(record => {
            const { formattedTime } = formatDateForDisplay(record.dateTime);
            const isIncome = accountTypes.get(currentAccount)["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].includes(record.type); 
            const color = isIncome ? "#4CAF50" : "#F44336";
            return `<tr>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">${formattedTime}</td>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">${record.type}</td>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center;">${record.description}</td>
            <td style="padding: 8px; border: 1px solid #ddd; text-align: center; color: ${color}; font-weight: bold;">${record.amount.toLocaleString()}</td>
            </tr>`;
        }).join('')} 
        </tbody> 
        </table> 
        </div>`;
    }
    
    let comparisonText = ''; let comparisonColor = ''; let differenceAmount = 0;
    if (summary.totalIncome > summary.totalExpense) {
        differenceAmount = summary.totalIncome - summary.totalExpense;
        comparisonText = `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ = ${differenceAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        comparisonColor = 'blue';
    } else if (summary.totalIncome < summary.totalExpense) {
        differenceAmount = summary.totalExpense - summary.totalIncome;
        comparisonText = `‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ = ${differenceAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        comparisonColor = 'red';
    } else {
        comparisonText = '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢';
        comparisonColor = 'black';
    }
    
    let summaryLineHTML;
    if (summary.totalIncome === 0 && summary.totalExpense === 0) {
         summaryLineHTML = `<p style="color: green; font-weight: bold;">${headerLine1} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏∞‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</p>`;
    } else {
         summaryLineHTML = `<p style="color: ${comparisonColor}; font-weight: bold;">${headerLine1} ${comparisonText}</p>`;
    }
    
    let totalBalanceLine;
    if (type === 'range' || type === 'all') {
        totalBalanceLine = `<p><span style="color: blue; font-size: 14px; font-weight: bold;">${headerLine2} = </span><span style="color: ${totalBalance >= 0 ? 'green' : 'red'}; font-size: 16px; font-weight: bold;">${totalBalance.toLocaleString()}</span> ‡∏ö‡∏≤‡∏ó</p>`
    } else {
        totalBalanceLine = `<p><span style="color: blue; font-size: 14px; font-weight: bold;">‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ = </span><span style="color: ${totalBalance >= 0 ? 'green' : 'red'}; font-size: 16px; font-weight: bold;">${totalBalance.toLocaleString()}</span> ‡∏ö‡∏≤‡∏ó</p>`
    }
    
    const summaryDateTime = new Date().toLocaleString("th-TH", { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'}) + ' ‡∏ô.';
    
    return ` 
    <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> ${currentAccount}</p> 
    <p><strong>‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : </strong> ${summaryDateTime}</p> 
    <p><strong>${title} : </strong> ${thaiDateString}</p> 
    ${transactionDaysInfo ? transactionDaysInfo : ''} 
    <hr style="border: 0.5px solid green;">
    <p><strong>‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö : </strong> ${summary.incomeCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.totalIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>${incomeHTML} 
    <hr style="border: 0.5px solid green;">
    <p><strong>‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ : </strong> ${summary.expenseCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.totalExpense.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>${expenseHTML} 
    <hr style="border: 0.5px solid green;">
    ${summaryLineHTML} 
    ${totalBalanceLine} 
    <p>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° : <span style="color: orange;">${remark}</span></p> 
    ${recordsHTML}`;
}

function buildPdfSummaryHtml(context) {
    const { summaryResult, title, dateString, remark, transactionDaysInfo, type, thaiDateString, headerLine1, headerLine2, headerLine3 } = context;
    const { summary, periodRecords, totalBalance } = summaryResult;
    
    let incomeHTML = ''; 
    for (const type in summary.income) { 
        incomeHTML += `<p style="margin-left: 15px; line-height: 0.5;">- ${type} : ${summary.income[type].count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.income[type].amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>`; 
    }
    
    let expenseHTML = ''; 
    for (const type in summary.expense) { 
        expenseHTML += `<p style="margin-left: 15px; line-height: 0.5;">- ${type} : ${summary.expense[type].count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.expense[type].amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>`; 
    }
    
    let recordsHTML = '';
    if (periodRecords.length > 0) {
        recordsHTML = ` 
        <div style="margin-top: 20px;"> 
        <h4>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°</h4> 
        <table style="width: 100%; border-collapse: collapse; margin-top: 10px; text-align: center;">
        <thead>
        <tr style="background-color: #f2f2f2;">
        <th style="width: 15%; padding: 4px; border: 1px solid #ddd;">‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ</th>
        <th style="width: 10%; padding: 4px; border: 1px solid #ddd;">‡πÄ‡∏ß‡∏•‡∏≤</th>
        <th style="width: 15%; padding: 4px; border: 1px solid #ddd;">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
        <th style="width: 30%; padding: 4px; border: 1px solid #ddd;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
        <th style="width: 15%; padding: 4px; border: 1px solid #ddd;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</th>
        </tr>
        </thead>
        <tbody>
        ${periodRecords.map(record => {
            const { formattedDate, formattedTime } = formatDateForDisplay(record.dateTime);
            const isIncome = accountTypes.get(currentAccount)["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"].includes(record.type); 
            const color = isIncome ? "#4CAF50" : "#F44336";
            
            return `
            <tr>
            <td style="padding: 4px; border: 1px solid #ddd; word-wrap: break-word;">${formattedDate}</td>
            <td style="padding: 4px; border: 1px solid #ddd; word-wrap: break-word;">${formattedTime}</td>
            <td style="padding: 4px; border: 1px solid #ddd; word-wrap: break-word;">${record.type}</td>
            <td style="padding: 4px; border: 1px solid #ddd; word-wrap: break-word;">${record.description}</td>
            <td style="padding: 4px; border: 1px solid #ddd; color: ${color}; font-weight: bold; word-wrap: break-word;">${record.amount.toLocaleString()}</td>
            </tr>`;
        }).join('')} 
        </tbody> 
        </table> 
        </div>`;
    }
    
    let comparisonText = ''; let comparisonColor = ''; let differenceAmount = 0;
    if (summary.totalIncome > summary.totalExpense) {
        differenceAmount = summary.totalIncome - summary.totalExpense;
        comparisonText = `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ = ${differenceAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        comparisonColor = 'blue';
    } else if (summary.totalIncome < summary.totalExpense) {
        differenceAmount = summary.totalExpense - summary.totalIncome;
        comparisonText = `‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ = ${differenceAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        comparisonColor = 'red';
    } else {
        comparisonText = '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢';
        comparisonColor = 'black';
    }
    
    let summaryLineHTML;
    if (summary.totalIncome === 0 && summary.totalExpense === 0) {
        summaryLineHTML = `<p style="color: green; font-weight: bold; line-height: 0.5;">${headerLine1} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô</p>`;
    } else {
        summaryLineHTML = `<p style="color: ${comparisonColor}; font-weight: bold; line-height: 0.5;">${headerLine1} ${comparisonText}</p>`;
    }
    
    let totalBalanceLine;
    if (type === 'range' || type === 'all') {
        totalBalanceLine = `<p style="line-height: 0.5;"><b>${headerLine2} = </b><b style="color: ${totalBalance >= 0 ? 'green' : 'red'}; font-size: 1.1em;">${totalBalance.toLocaleString()}</b> ‡∏ö‡∏≤‡∏ó</p>`
    } else {
        totalBalanceLine = `<p style="line-height: 0.5;"><b>‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ = </b><b style="color: ${totalBalance >= 0 ? 'green' : 'red'}; font-size: 1.1em;">${totalBalance.toLocaleString()}</b> ‡∏ö‡∏≤‡∏ó</p>`
    }
    
    const summaryDateTime = new Date().toLocaleString("th-TH", { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'}) + ' ‡∏ô.';
    
    return ` 
    <p style="line-height: 0.5;"><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</strong> ${currentAccount}</p> 
    <p style="line-height: 0.5;"><strong>‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : </strong> ${summaryDateTime}</p> 
    <p style="line-height: 0.5;"><strong>${title} : </strong> ${thaiDateString}</p> 
    ${transactionDaysInfo ? transactionDaysInfo.replace(/<p/g, '<p style="line-height: 0.5;"') : ''} 
    <hr style="border: 0.5px solid green;">
    <p style="line-height: 0.5;"><strong>‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö : </strong> ${summary.incomeCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.totalIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
    ${incomeHTML} 
    <hr style="border: 0.5px solid green;">
    <p style="line-height: 0.5;"><strong>‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ : </strong> ${summary.expenseCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.totalExpense.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
    ${expenseHTML} 
    <hr style="border: 0.5px solid green;">
    ${summaryLineHTML} 
    ${totalBalanceLine} 
    <p style="line-height: 0.5;"><b>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° : </b><span style="color: orange;">${remark}</span></p> 
    ${recordsHTML}
    `;
}

function handleSummaryOutput(choice) {
    if (!summaryContext || !summaryContext.summaryResult) {
        console.error("Summary context is missing. Cannot proceed.");
        closeSummaryOutputModal();
        return;
    }
    
    if (choice === 'display') {
        const htmlForDisplay = buildOriginalSummaryHtml(summaryContext);
        openSummaryModal(htmlForDisplay);
    } else if (choice === 'xlsx') {
        const { summaryResult, title, dateString, remark, transactionDaysInfo, periodName } = summaryContext;
        exportSummaryToXlsx(summaryResult, title, dateString, remark, transactionDaysInfo, periodName);
        showToast(`üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå XLSX ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
    } else if (choice === 'pdf') {
        const printContainer = document.getElementById('print-container');
        if (printContainer) {
            const htmlWithDetailsForPdf = buildPdfSummaryHtml(summaryContext);
            printContainer.innerHTML = `<div class="summaryResult">${htmlWithDetailsForPdf}</div>`;
            
            // ‡∏ã‡πà‡∏≠‡∏ô Toast ‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå
            const toast = document.getElementById('toast');
            if (toast) {
                toast.style.display = 'none';
            }
            
            // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ DOM ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå
            setTimeout(() => { 
                window.print(); 
                
                // ‡πÅ‡∏™‡∏î‡∏á Toast ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏õ‡∏¥‡∏î)
                setTimeout(() => {
                    if (toast) {
                        toast.style.display = '';
                    }
                    showToast(`üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
                }, 1000);
            }, 250);
        }
    }
    closeSummaryOutputModal();
}

function summarizeToday() {
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô", 'error'); 
        return; 
    }
    const startDate = new Date(new Date().setHours(0, 0, 0, 0));
    const endDate = new Date(new Date().setHours(23, 59, 59, 999));
    const summaryResult = generateSummaryData(startDate, endDate);
    if (!summaryResult) return;
    const remarkInput = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ 'No comment'):", "No comment") || "No comment";
    const thaiDate = new Date(startDate);
    const thaiDateString = `${thaiDate.getDate()} ${thaiDate.toLocaleString('th-TH', { month: 'long' })} ${thaiDate.getFullYear() + 543}`;
    summaryContext = {
        summaryResult, type: 'today', title: "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", dateString: new Date(startDate).toLocaleDateString('en-CA'), thaiDateString: thaiDateString, remark: remarkInput, periodName: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', headerLine1: '‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ :', headerLine3: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ : ${thaiDateString}`
    };
    openSummaryOutputModal();
    showToast("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'success');
}

function summarizeByDayMonth() {
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô", 'error'); 
        return; 
    }
    const dayMonthInput = document.getElementById('customDayMonth').value;
    const selectedDate = parseDateInput(dayMonthInput);
    if (!selectedDate) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 'error'); 
        return; 
    }
    const startDate = new Date(selectedDate.setHours(0, 0, 0, 0));
    const endDate = new Date(selectedDate.setHours(23, 59, 59, 999));
    const summaryResult = generateSummaryData(startDate, endDate);
    if (!summaryResult) return;
    const remarkInput = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ 'No comment'):", "No comment") || "No comment";
    const thaiDate = new Date(startDate);
    const thaiDateString = `${thaiDate.getDate()} ${thaiDate.toLocaleString('th-TH', { month: 'long' })} ${thaiDate.getFullYear() + 543}`;
    summaryContext = {
        summaryResult, type: 'byDayMonth', title: "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", dateString: dayMonthInput, thaiDateString: thaiDateString, remark: remarkInput, periodName: dayMonthInput.replace(/-/g, '_'), headerLine1: '‡∏™‡∏£‡∏∏‡∏õ :', headerLine3: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å : ${thaiDateString}`
    };
    openSummaryOutputModal();
    showToast("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'success');
}

function summarize() {
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô", 'error'); 
        return; 
    }
    const startDateStr = document.getElementById('startDate').value;
    const endDateStr = document.getElementById('endDate').value;
    const startDate = parseDateInput(startDateStr); 
    const endDate = parseDateInput(endDateStr);
    if (!startDate || !endDate) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", 'error'); 
        return; 
    }
    if (startDate > endDate) { 
        showToast("‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", 'error'); 
        return; 
    }
const adjustedEndDate = new Date(endDate);
adjustedEndDate.setHours(23, 59, 59, 999);
const summaryResult = generateSummaryData(startDate, adjustedEndDate);
    if (!summaryResult) return;
    const daysDiff = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
    const transactionDays = new Set(summaryResult.periodRecords.map(r => parseLocalDateTime(r.dateTime).toDateString()));
    const transactionDaysInfo = `<p style="font-size: 16px; color: blue; font-weight: bold;">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${daysDiff} ‡∏ß‡∏±‡∏ô</p><p style="font-size: 16px; color: #333; font-weight: bold;">‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ${transactionDays.size} ‡∏ß‡∏±‡∏ô, ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ ${daysDiff - transactionDays.size} ‡∏ß‡∏±‡∏ô</p>`;
    const remarkInput = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ 'No comment'):", "No comment") || "No comment";
    const thaiDateString = `${startDate.toLocaleDateString('th-TH', {day: 'numeric', month: 'long', year: 'numeric'})} ‡∏ñ‡∏∂‡∏á ${endDate.toLocaleDateString('th-TH', {day: 'numeric', month: 'long', year: 'numeric'})}`;
    summaryContext = {
        summaryResult, type: 'range', title: "‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", dateString: `${startDateStr} to ${endDateStr}`, thaiDateString: thaiDateString, remark: remarkInput, transactionDaysInfo: transactionDaysInfo, periodName: `‡∏à‡∏≤‡∏Å${startDateStr.replace(/-/g, '_')}_‡∏ñ‡∏∂‡∏á${endDateStr.replace(/-/g, '_')}`, headerLine1: '‡∏™‡∏£‡∏∏‡∏õ :', headerLine2: '‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ'
    };
    openSummaryOutputModal();
    showToast("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'success');
}

function summarizeAll() {
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô", 'error'); 
        return; 
    }
    const accountRecords = records.filter(r => r.account === currentAccount);
    if (accountRecords.length === 0) { 
        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ", 'error'); 
        return; 
    }
    const allDates = accountRecords.map(r => parseLocalDateTime(r.dateTime));
    const startDate = new Date(Math.min.apply(null, allDates)); 
    const endDate = new Date(Math.max.apply(null, allDates));
    startDate.setHours(0, 0, 0, 0); 
const adjustedEndDate = new Date(endDate);
adjustedEndDate.setHours(23, 59, 59, 999);
const summaryResult = generateSummaryData(startDate, adjustedEndDate);
    if (!summaryResult) return;
    const daysDiff = Math.floor((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
    const transactionDays = new Set(summaryResult.periodRecords.map(r => parseLocalDateTime(r.dateTime).toDateString()));
    const transactionDaysInfo = `<p style="font-size: 16px; color: blue; font-weight: bold;">‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${daysDiff} ‡∏ß‡∏±‡∏ô</p><p style="font-size: 16px; color: #333; font-weight: bold;">‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ${transactionDays.size} ‡∏ß‡∏±‡∏ô, ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ ${daysDiff - transactionDays.size} ‡∏ß‡∏±‡∏ô</p>`;
    const remarkInput = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ 'No comment'):", "No comment") || "No comment";
    const startDateStr = `${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}-${String(startDate.getDate()).padStart(2, '0')}`;
    const endDateStr = `${endDate.getFullYear()}-${String(endDate.getMonth() + 1).padStart(2, '0')}-${String(endDate.getDate()).padStart(2, '0')}`;
    const thaiDateString = `${startDate.toLocaleDateString('th-TH', {day: 'numeric', month: 'long', year: 'numeric'})} ‡∏ñ‡∏∂‡∏á ${endDate.toLocaleDateString('th-TH', {day: 'numeric', month: 'long', year: 'numeric'})}`;
    summaryContext = {
        summaryResult, type: 'all', title: "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà", dateString: `${startDateStr} to ${endDateStr}`, thaiDateString: thaiDateString, remark: remarkInput, transactionDaysInfo: transactionDaysInfo, periodName: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', headerLine1: '‡∏™‡∏£‡∏∏‡∏õ :', headerLine2: '‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    };
    openSummaryOutputModal();
    showToast("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", 'success');
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
// ==============================================

function saveToFile() { 
    closeExportOptionsModal(); 
    if (accounts.length === 0) { 
        showToast("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", 'error'); 
        return; 
    } 
    document.getElementById('formatSelectionModal').style.display = 'flex'; 
    showToast("üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå...", 'info');
}

function exportSelectedAccount() { 
    closeExportOptionsModal(); 
    if (!currentAccount) { 
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô", 'error'); 
        return; 
    } 
    document.getElementById('exportSingleAccountModal').style.display = 'flex'; 
    showToast("üìÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ...", 'info');
}

function initiateSingleDateExport() {
    if (!currentAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô", 'error');
        return;
    }
    closeExportOptionsModal();
    document.getElementById('singleDateAccountName').textContent = currentAccount;
    document.getElementById('exportSingleDate').value = new Date().toISOString().slice(0, 10);
    document.getElementById('singleDateExportModal').style.display = 'flex';
    showToast("üìÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô...", 'info');
}

function processSingleDateExport() {
    const selectedDateStr = document.getElementById('exportSingleDate').value;
    if (!selectedDateStr) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", 'error');
        return;
    }
    const filteredRecords = records.filter(record => {
        return record.account === currentAccount && record.dateTime.startsWith(selectedDateStr);
    });
    if (filteredRecords.length === 0) {
        showToast(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDateStr}`, 'error');
        return;
    }
    singleDateExportContext = {
        records: filteredRecords,
        selectedDate: selectedDateStr,
    };
    closeSingleDateExportModal();
    document.getElementById('singleDateExportFormatModal').style.display = 'flex';
    showToast(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${filteredRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDateStr}`, 'success');
}

function initiateDateRangeExport() {
    if (!currentAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡πà‡∏≠‡∏ô", 'error');
        return;
    }
    
    closeExportOptionsModal();
    setupDateRangeModal();
    document.getElementById('dateRangeExportModal').style.display = 'flex';
    showToast("üìÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà...", 'info');
}

function setupDateRangeModal() {
    document.getElementById('dateRangeAccountName').textContent = currentAccount;
    
    const accountRecords = records.filter(record => record.account === currentAccount);
    let startDateValue = new Date().toISOString().slice(0, 10);
    
    if (accountRecords.length > 0) {
        const dates = accountRecords.map(record => parseLocalDateTime(record.dateTime));
        const minDate = new Date(Math.min(...dates));
        startDateValue = minDate.toISOString().slice(0, 10);
    }
    
    document.getElementById('exportStartDate').value = startDateValue;
    document.getElementById('exportEndDate').value = new Date().toISOString().slice(0, 10);
}

function processDateRangeExport() {
    const validationResult = validateDateRangeInput();
    if (!validationResult.isValid) {
        showToast(validationResult.message, 'error');
        return;
    }
    
    const { startDateStr, endDateStr, startDate, endDate } = validationResult;
    
    const filteredRecords = filterRecordsByDateRange(startDate, endDate);
    
    if (filteredRecords.length === 0) {
        showNoDataAlert(startDateStr, endDateStr);
        return;
    }
    
    exportDateRangeAsJson(filteredRecords, startDateStr, endDateStr);
    closeDateRangeExportModal();
}

async function exportDateRangeAsJson(filteredRecords, startDate, endDate) {
    const defaultFileName = `${currentAccount}_${startDate}_‡∏ñ‡∏∂‡∏á_${endDate}`;
    const fileName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•):", defaultFileName);
    
    if (!fileName) {
        showToast("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå", 'info');
        return;
    }
    
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏î‡πâ‡∏ß‡∏¢
    const accountTypesData = accountTypes.get(currentAccount) || { "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": [], "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": [] };
    
    const exportData = {
        accountName: currentAccount,
        isDateRangeExport: true,
        exportStartDate: startDate,
        exportEndDate: endDate,
        exportTimestamp: new Date().toISOString(),
        recordCount: filteredRecords.length,
        records: filteredRecords,
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
        accountTypes: accountTypesData
    };
    
    let dataString = JSON.stringify(exportData, null, 2);
    
    if (backupPassword) {
        showToast('üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
        try {
            const encryptedObject = await encryptData(dataString, backupPassword);
            dataString = JSON.stringify(encryptedObject, null, 2);
        } catch (e) {
            showToast('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!', 'error');
            return;
        }
    }
    
    try {
        const blob = new Blob([dataString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${fileName}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startDate} ‡∏ñ‡∏∂‡∏á ${endDate} ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${filteredRecords.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'success');
    } catch (error) {
        console.error("Error downloading file:", error);
        showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: " + error.message, 'error');
    }
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÇ‡∏´‡∏•‡∏î)
// ==============================================

function saveDataAndShowToast(entryCategory = 'neutral') { 
    const dataToSave = { 
        accounts: [...accounts], 
        currentAccount: currentAccount, 
        records: [...records], 
        accountTypes: Array.from(accountTypes.entries()), 
        backupPassword: backupPassword 
    }; 
    try { 
        localStorage.setItem('accountData', JSON.stringify(dataToSave)); 
    } catch (error) { 
        console.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error); 
        showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 'error'); 
        return; 
    } 
    
    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô showToast ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ toast ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    let message = '‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß';
    let type = 'info';
    
    if (entryCategory === 'income') { 
        message = '‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        type = 'success';
    } else if (entryCategory === 'expense') { 
        message = '‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        type = 'success';
    }
    
    showToast(message, type);
}

function saveToLocal(fromPasswordSave = false) {
    const dataToSave = {
        accounts: [...accounts],
        currentAccount: currentAccount,
        records: [...records],
        accountTypes: Array.from(accountTypes.entries()),
        backupPassword: backupPassword
    };
    try {
        localStorage.setItem('accountData', JSON.stringify(dataToSave));
        if (!fromPasswordSave) {
            showToast('‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    } catch (error) {
        console.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß", 'error');
    }
}

function loadFromLocal() {
    const data = localStorage.getItem('accountData');
    if (data) {
        try {
            const parsed = JSON.parse(data);
            accounts = parsed.accounts || [];
            currentAccount = parsed.currentAccount || null;
            records = parsed.records || [];
            accountTypes = new Map(parsed.accountTypes || []);
            backupPassword = parsed.backupPassword || null; 
            renderBackupPasswordStatus();
            updateAccountSelect();
            if (currentAccount) {
                document.getElementById('accountSelect').value = currentAccount;
            }
            changeAccount();
            showToast('üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
        } catch (error) {
            console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LocalStorage ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", error);
            showToast('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'error');
        }
    }
    updateMultiAccountSelector();
}

async function handleSaveAs(format) {
    closeFormatModal();
    const formatLower = format.toLowerCase().trim();
    const fileName = prompt("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•):", "‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ");
    if (!fileName) {
        showToast("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå", 'info');
        return;
    }
    const now = new Date();
    const dateTimeString = `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}_${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}`;
    
    if (formatLower === 'json') {
        const fullFileName = `${fileName}_${dateTimeString}.json`;
        const data = { accounts, currentAccount, records, accountTypes: Array.from(accountTypes.entries()), backupPassword: null };
        let dataString = JSON.stringify(data, null, 2);
        if (backupPassword) {
            showToast('üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
            try {
                const encryptedObject = await encryptData(dataString, backupPassword);
                dataString = JSON.stringify(encryptedObject, null, 2);
            } catch (e) {
                showToast('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!', 'error'); 
                return;
            }
        }
        const blob = new Blob([dataString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a'); a.href = url; a.download = fullFileName; a.click();
        URL.revokeObjectURL(url);
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡πÑ‡∏ü‡∏•‡πå: ${fullFileName}`, 'success');
    } else if (formatLower === 'csv') {
        const fullFileName = `${fileName}_${dateTimeString}.csv`;
        let csvData = [];
        csvData.push(['###ALL_ACCOUNTS_BACKUP_CSV###']);
        csvData.push(['###ACCOUNTS_LIST###', ...accounts]);
        csvData.push(['###ACCOUNT_TYPES_START###']);
        for (const [accName, typesObj] of accountTypes.entries()) {
            initializeAccountTypes(accName);
            const currentTypes = accountTypes.get(accName);
            if (currentTypes.‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö && currentTypes.‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö.length > 0) csvData.push([accName, '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', ...currentTypes.‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö]);
            if (currentTypes.‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ && currentTypes.‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢.length > 0) csvData.push([accName, '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', ...currentTypes.‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢]);
        }
        csvData.push(['###ACCOUNT_TYPES_END###']);
        csvData.push(['###DATA_START###']);
        csvData.push(["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"]);
        const allSortedRecords = [...records].sort((a, b) => parseLocalDateTime(a.dateTime) - parseLocalDateTime(b.dateTime));
        allSortedRecords.forEach(record => {
            const { formattedDate, formattedTime } = formatDateForDisplay(record.dateTime);
            csvData.push([formattedDate, formattedTime, record.type, record.description, record.amount, record.account]);
        });
        let csvContent = Papa.unparse(csvData, { header: false });
        const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = fullFileName;
        link.click();
        URL.revokeObjectURL(link.href);
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV "${fullFileName}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`, 'success');
    }
}

async function handleExportSelectedAs(format) {
    closeExportSingleAccountModal();
    if (!currentAccount) {
        showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 'error');
        return;
    }
    const fileName = prompt(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ${currentAccount} (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•):`, currentAccount);
    if (!fileName) {
        showToast("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå", 'info');
        return;
    }
    const now = new Date();
    const dateTimeString = `${now.getFullYear()}${String(now.getMonth() + 1).padStart(2, '0')}${String(now.getDate()).padStart(2, '0')}_${String(now.getHours()).padStart(2, '0')}${String(now.getMinutes()).padStart(2, '0')}`;
    
    if (format === 'json') {
        const fullFileName = `${fileName}_${dateTimeString}.json`;
        const accountData = {
            accountName: currentAccount,
            records: records.filter(record => record.account === currentAccount),
            accountTypes: accountTypes.get(currentAccount) || { "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": [], "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": [] }
        };
        let dataString = JSON.stringify(accountData, null, 2);
        if (backupPassword) {
            showToast('üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
            try {
                const encryptedObject = await encryptData(dataString, backupPassword);
                dataString = JSON.stringify(encryptedObject, null, 2);
            } catch (e) {
                showToast('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!', 'error'); 
                return;
            }
        }
        const blob = new Blob([dataString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a'); a.href = url; a.download = fullFileName; a.click();
        URL.revokeObjectURL(url);
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡πÑ‡∏ü‡∏•‡πå: ${fullFileName}`, 'success');
    } else if (format === 'csv') {
        const fullFileName = `${fileName}_${dateTimeString}.csv`;
        initializeAccountTypes(currentAccount);
        const accountCurrentTypes = accountTypes.get(currentAccount);
        let excelData = [];
        excelData.push([`‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${currentAccount}`]);
        excelData.push(['###ACCOUNT_TYPES###']);
        excelData.push(['‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö', ...(accountCurrentTypes['‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö'] || [])]);
        excelData.push(['‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢', ...(accountCurrentTypes['‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'] || [])]);
        excelData.push(['###DATA_START###']);
        excelData.push(["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)"]);
        const filteredRecords = records.filter(record => record.account === currentAccount).sort((a, b) => parseLocalDateTime(a.dateTime) - parseLocalDateTime(b.dateTime));
        filteredRecords.forEach(record => {
            const { formattedDate, formattedTime } = formatDateForDisplay(record.dateTime);
            excelData.push([formattedDate, formattedTime, record.type, record.description, record.amount]);
        });
        let csvContent = Papa.unparse(excelData, { header: false });
        const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a"); link.href = URL.createObjectURL(blob); link.download = fullFileName; link.click();
        setTimeout(() => URL.revokeObjectURL(link.href), 100);
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡πÄ‡∏õ‡πá‡∏ô CSV ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡πÑ‡∏ü‡∏•‡πå: ${fullFileName}`, 'success');
    }
}

async function handleSingleDateExportAs(format) {
    closeSingleDateExportFormatModal();
    const { records: filteredRecords, selectedDate } = singleDateExportContext;
    
    if (!filteredRecords || filteredRecords.length === 0) {
        showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", 'error');
        return;
    }
    const fileName = prompt(`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•):`, `${currentAccount}_${selectedDate}`);
    if (!fileName) {
        showToast("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå", 'info');
        return;
    }
    const fullFileName = `${fileName}.${format}`;
    
    if (format === 'json') {
        const exportData = {
            accountName: currentAccount,
            isDailyExport: true,
            exportDate: selectedDate,
            records: filteredRecords
        };
        let dataString = JSON.stringify(exportData, null, 2);
        if (backupPassword) {
            showToast('üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
            try {
                const encryptedObject = await encryptData(dataString, backupPassword);
                dataString = JSON.stringify(encryptedObject, null, 2);
            } catch (e) {
                showToast('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!', 'error'); 
                return;
            }
        }
        const blob = new Blob([dataString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a'); a.href = url; a.download = fullFileName; a.click();
        URL.revokeObjectURL(url);
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate} ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡πÑ‡∏ü‡∏•‡πå: ${fullFileName}`, 'success');

    } else if (format === 'xlsx') {
        const wb = XLSX.utils.book_new();
        
        let excelData = [];
        
        excelData.push([`‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${currentAccount}`]);
        excelData.push([`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å: ${selectedDate}`]);
        excelData.push([]);
        
        excelData.push(["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)"]);
        
        const sortedRecords = [...filteredRecords].sort((a, b) => parseLocalDateTime(a.dateTime) - parseLocalDateTime(b.dateTime));
        
        sortedRecords.forEach(record => {
            const { formattedDate, formattedTime } = formatDateForDisplay(record.dateTime);
            excelData.push([formattedDate, formattedTime, record.type, record.description, record.amount]);
        });
        
        const ws = XLSX.utils.aoa_to_sheet(excelData);
        
        const colWidths = [
            {wch: 12},
            {wch: 10},
            {wch: 15},
            {wch: 30},
            {wch: 15}
        ];
        ws['!cols'] = colWidths;
        
        ws['!pageSetup'] = {
            orientation: 'landscape',
            paperSize: 9,
            fitToPage: true,
            fitToWidth: 1,
            fitToHeight: 0,
            margins: {
                left: 0.7, right: 0.7,
                top: 0.75, bottom: 0.75,
                header: 0.3, footer: 0.3
            }
        };
        
        XLSX.utils.book_append_sheet(wb, ws, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ");
        
        XLSX.writeFile(wb, fullFileName);
        showToast(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${selectedDate} ‡πÄ‡∏õ‡πá‡∏ô XLSX ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡πÑ‡∏ü‡∏•‡πå: ${fullFileName}`, 'success');
    }
    singleDateExportContext = {};
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå
// ==============================================

async function loadFromFile(event) {
    const file = event.target.files[0]; 
    if (!file) { return; }
    const reader = new FileReader();
    const fileName = file.name.toLowerCase();

    if (fileName.endsWith('.csv')) {
        reader.onload = (e) => loadFromCsv(e.target.result);
        reader.readAsText(file, 'UTF-8');
        showToast("üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV...", 'info');
    } else if (fileName.endsWith('.json')) {
        reader.onload = async (e) => {
            try {
                const importedData = JSON.parse(e.target.result);
                let finalDataToMerge = null;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
                if (importedData && importedData.isEncrypted === true) {
                    const password = prompt("‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™:");
                    if (!password) { 
                        showToast("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå", 'info'); 
                        event.target.value = ''; 
                        return; 
                    }
                    showToast('üîì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™...', 'info');
                    const decryptedString = await decryptData(importedData, password);
                    if (decryptedString) {
                        finalDataToMerge = JSON.parse(decryptedString);
                        showToast('‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
                    } else {
                        showToast("‚ùå ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 'error'); 
                        event.target.value = ''; 
                        return;
                    }
                } else {
                    finalDataToMerge = importedData;
                }
                
                // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                if (finalDataToMerge.accounts && Array.isArray(finalDataToMerge.accounts)) {
                    // ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    if(confirm("‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
                        accounts = finalDataToMerge.accounts;
                        records = finalDataToMerge.records;
                        accountTypes = new Map(finalDataToMerge.accountTypes);
                        currentAccount = finalDataToMerge.currentAccount;
                        showToast("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å JSON ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", 'success');
                    }
                } else if (finalDataToMerge.isDailyExport === true) {
                    // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
                    const { accountName, exportDate, records: recordsToAdd } = finalDataToMerge;
                    const confirmMsg = `‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${exportDate} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${recordsToAdd.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${accountName}"\n\n‡∏Å‡∏î OK ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°)\n‡∏Å‡∏î Cancel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`;
                    if (confirm(confirmMsg)) {
                        processDateRangeImport(finalDataToMerge);
                    }
                } else if (finalDataToMerge.isDateRangeExport === true) {
                    // ‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                    const { accountName, exportStartDate, exportEndDate, records: recordsToAdd, accountTypes: importedAccountTypes } = finalDataToMerge;
                    const confirmMsg = `‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${accountName}" ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${exportStartDate} ‡∏ñ‡∏∂‡∏á ${exportEndDate} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${recordsToAdd.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\n‡∏Å‡∏î OK ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°)\n‡∏Å‡∏î Cancel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`;
                    
                    if (confirm(confirmMsg)) {
                        processDateRangeImport({
                            accountName: accountName,
                            exportStartDate: exportStartDate,
                            exportEndDate: exportEndDate,
                            records: recordsToAdd,
                            accountTypes: importedAccountTypes
                        });
                    }
                } else if (finalDataToMerge.accountName) {
                    // ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                    const confirmMsg = `‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${finalDataToMerge.accountName}"\n\n‡∏Å‡∏î OK ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà" ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ\n‡∏Å‡∏î Cancel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`;
                    if (confirm(confirmMsg)) {
                        if (!accounts.includes(finalDataToMerge.accountName)) {
                            accounts.push(finalDataToMerge.accountName);
                        }
                        records = records.filter(r => r.account !== finalDataToMerge.accountName);
                        records.push(...(finalDataToMerge.records || []));
                        accountTypes.set(finalDataToMerge.accountName, finalDataToMerge.accountTypes || { "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": [], "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": [] });
                        currentAccount = finalDataToMerge.accountName;
                        showToast(`‚úÖ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${finalDataToMerge.accountName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`, 'success');
                    }
                } else {
                    throw new Error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
                }
                
                // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                updateAccountSelect();
                if (currentAccount) {
                    document.getElementById('accountSelect').value = currentAccount;
                }
                changeAccount();
                saveToLocal();
                updateMultiAccountSelector();
               
                
            } catch (error) {
                showToast("‚ùå ‡πÑ‡∏ü‡∏•‡πå JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢: " + error.message, 'error');
            }
        };
        reader.readAsText(file);
    } else {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .json ‡∏´‡∏£‡∏∑‡∏≠ .csv ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", 'error');
    }
    reader.onerror = () => showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå", 'error');
    event.target.value = '';
}

function processDateRangeImport(importedData) {
    const { accountName, exportStartDate, exportEndDate, records: recordsToAdd, accountTypes: importedAccountTypes } = importedData;
    
    console.log(`üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${accountName}`);
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!accounts.includes(accountName)) {
        accounts.push(accountName);
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà: ${accountName}`);
    }
    
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
    if (importedAccountTypes) {
        accountTypes.set(accountName, importedAccountTypes);
        console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${accountName}`, importedAccountTypes);
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        initializeAccountTypes(accountName);
        console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${accountName}`);
    }
    
    let addedCount = 0;
    let skippedCount = 0;
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥)
    recordsToAdd.forEach(recordToAdd => {
        const isDuplicate = records.some(existingRecord =>
            existingRecord.account === accountName &&
            existingRecord.dateTime === recordToAdd.dateTime &&
            existingRecord.amount === recordToAdd.amount &&
            existingRecord.description === recordToAdd.description &&
            existingRecord.type === recordToAdd.type
        );
        
        if (!isDuplicate) {
            records.push({ ...recordToAdd, account: accountName });
            addedCount++;
        } else {
            skippedCount++;
        }
    });
    
    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    currentAccount = accountName;
    
    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
    updateAccountSelect();
    document.getElementById('accountSelect').value = currentAccount;
    changeAccount();
    
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    saveToLocal();
    
    showToast(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÄ‡∏û‡∏¥‡πà‡∏° ${addedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà\n‡∏Ç‡πâ‡∏≤‡∏° ${skippedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô\n‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`, 'success');
    
}

function createImportConfirmationMessage(accountName, startDate, endDate, recordCount) {
    return `‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${accountName}" ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startDate} ‡∏ñ‡∏∂‡∏á ${endDate} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${recordCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏Å‡∏î OK ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°)\n‡∏Å‡∏î Cancel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`;
}

function mergeImportedRecords(accountName, recordsToAdd) {
    if (!accounts.includes(accountName)) {
        accounts.push(accountName);
    }
    
    let addedCount = 0;
    let skippedCount = 0;
    
    recordsToAdd.forEach(recordToAdd => {
        const isDuplicate = isRecordDuplicate(accountName, recordToAdd);
        
        if (!isDuplicate) {
            records.push({ ...recordToAdd, account: accountName });
            addedCount++;
        } else {
            skippedCount++;
        }
    });
    
    return { addedCount, skippedCount };
}

function isRecordDuplicate(accountName, recordToCheck) {
    return records.some(existingRecord =>
        existingRecord.account === accountName &&
        existingRecord.dateTime === recordToCheck.dateTime &&
        existingRecord.amount === recordToCheck.amount &&
        existingRecord.description === recordToCheck.description &&
        existingRecord.type === recordToCheck.type
    );
}

function showImportResult(result, accountName) {
    const { addedCount, skippedCount } = result;
    currentAccount = accountName;
    
    showToast(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÄ‡∏û‡∏¥‡πà‡∏° ${addedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà\n‡∏Ç‡πâ‡∏≤‡∏° ${skippedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô`, 'success');
}

function updateAccountSelection(accountName) {
    updateAccountSelect();
    document.getElementById('accountSelect').value = accountName;
    changeAccount();
}

function importFromFileForMerging(event) {
    const file = event.target.files[0];
    if (!file) { return; }
    if (!currentAccount) {
        showToast("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á) ‡∏Å‡πà‡∏≠‡∏ô", 'error');
        event.target.value = '';
        return;
    }

    const reader = new FileReader();
    const fileName = file.name.toLowerCase();

    const processAndMerge = async (dataString) => {
        try {
            let parsedData = JSON.parse(dataString);
            let finalDataToMerge = null;

            if (parsedData && parsedData.isEncrypted === true) {
                const password = prompt("‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™:");
                if (!password) { 
                    showToast("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå", 'info'); 
                    return; 
                }
                showToast('üîì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™...', 'info');
                const decryptedString = await decryptData(parsedData, password);
                if (decryptedString) {
                    finalDataToMerge = JSON.parse(decryptedString);
                    showToast('‚úÖ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
                } else {
                    showToast("‚ùå ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 'error'); 
                    return;
                }
            } else {
                finalDataToMerge = parsedData;
            }

            if (finalDataToMerge && finalDataToMerge.isDailyExport === true) {
                const { exportDate, records: recordsToAdd } = finalDataToMerge;
                
                let addedCount = 0;
                let skippedCount = 0;

                recordsToAdd.forEach(recordToAdd => {
                    const isDuplicate = records.some(existingRecord =>
                        existingRecord.account === currentAccount &&
                        existingRecord.dateTime === recordToAdd.dateTime &&
                        existingRecord.amount === recordToAdd.amount &&
                        existingRecord.description === recordToAdd.description &&
                        existingRecord.type === recordToAdd.type
                    );
                    if (!isDuplicate) {
                        records.push({ ...recordToAdd, account: currentAccount });
                        addedCount++;
                    } else {
                        skippedCount++;
                    }
                });

                showToast(`‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡πÄ‡∏û‡∏¥‡πà‡∏° ${addedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà\n‡∏Ç‡πâ‡∏≤‡∏° ${skippedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô`, 'success');
                displayRecords();
                saveDataAndShowToast();

            } else {
                showToast("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", 'error');
            }
        } catch (error) {
            showToast("‚ùå ‡πÑ‡∏ü‡∏•‡πå JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢: " + error.message, 'error');
        }
    };
    
    if (fileName.endsWith('.json')) {
        reader.onload = (e) => processAndMerge(e.target.result);
        reader.readAsText(file);
        showToast("üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON...", 'info');
    } else {
        showToast("‚ùå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå .json ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", 'error');
    }
    
    reader.onerror = () => showToast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå", 'error');
    event.target.value = '';
}

function loadFromCsv(csvText) {
    let csvImportData = { 
        isFullBackup: false, 
        isDailyExport: false, 
        isDateRangeExport: false,
        accountName: '', 
        exportDate: '', 
        exportStartDate: '',
        exportEndDate: '',
        types: { "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö": [], "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢": [] }, 
        records: [] 
    };
    let inTypesSection = false;
    let inDataSection = false;
    let dataHeaderPassed = false;
    
    Papa.parse(csvText, {
        skipEmptyLines: true,
        step: function(results) {
            const row = results.data;
            const firstCell = (row[0] || '').trim();
            
            if (firstCell === '###ALL_ACCOUNTS_BACKUP_CSV###') {
                csvImportData.isFullBackup = true;
                return;
            }
            
            if (firstCell.startsWith('isDailyExport:')) {
                csvImportData.isDailyExport = true;
                csvImportData.exportDate = firstCell.split(':')[1].trim();
                return;
            }
            
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            if (firstCell.startsWith('isDateRangeExport:')) {
                csvImportData.isDateRangeExport = true;
                const dateRange = firstCell.split(':')[1].trim();
                const [startDate, endDate] = dateRange.split(' to ');
                csvImportData.exportStartDate = startDate;
                csvImportData.exportEndDate = endDate;
                return;
            }
            
            if (firstCell === '###ACCOUNT_TYPES_START###') {
                inTypesSection = true;
                return;
            }
            
            if (firstCell === '###ACCOUNT_TYPES_END###') {
                inTypesSection = false;
                return;
            }
            
            if (firstCell === '###DATA_START###') {
                inDataSection = true;
                return;
            }
            
            if (inTypesSection && row.length >= 3) {
                const accName = row[0];
                const category = row[1];
                const types = row.slice(2).filter(t => t.trim() !== '');
                
                if (!csvImportData.accountName) {
                    csvImportData.accountName = accName;
                }
                
                if (category === '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö' || category === '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢') {
                    csvImportData.types[category] = types;
                }
                return;
            }
            
            if (inDataSection) {
                if (!dataHeaderPassed) {
                    dataHeaderPassed = true;
                    return;
                }
                
                if (row.length >= 5) {
                    const [dateStr, timeStr, type, description, amountStr] = row;
                    const amount = parseFloat(amountStr.replace(/[^\d.-]/g, ''));
                    
                    if (!isNaN(amount)) {
                        const [day, month, year] = dateStr.split('/');
                        const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                        const timeParts = timeStr.replace(' ‡∏ô.', '').split('.');
                        const formattedTime = `${timeParts[0].padStart(2, '0')}:${timeParts[1].padStart(2, '0')}`;
                        const dateTime = `${formattedDate} ${formattedTime}`;
                        
                        csvImportData.records.push({
                            dateTime,
                            type,
                            description,
                            amount,
                            account: csvImportData.accountName
                        });
                    }
                }
            }
        },
        complete: function() {
            if (csvImportData.isFullBackup) {
                // ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ...
            } else if (csvImportData.isDailyExport) {
                // ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ...
            } else if (csvImportData.isDateRangeExport) {
                // ‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                const { accountName, exportStartDate, exportEndDate, records: recordsToAdd } = csvImportData;
                const confirmMsg = `‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${accountName}" ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${exportStartDate} ‡∏ñ‡∏∂‡∏á ${exportEndDate} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${recordsToAdd.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏Å‡∏î OK ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°)`;
                
                if (confirm(confirmMsg)) {
                    processDateRangeImport({
                        accountName: accountName,
                        exportStartDate: exportStartDate,
                        exportEndDate: exportEndDate,
                        records: recordsToAdd
                    });
                }
            } else if (csvImportData.accountName) {
                // ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏° ...
            } else {
                showToast('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
            }
        }
    });
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
// ==============================================

function saveBackupPassword(e) {
    e.preventDefault();
    const newPassword = document.getElementById('backup-password').value;
    const confirmPassword = document.getElementById('backup-password-confirm').value;
    if (newPassword !== confirmPassword) {
        showToast('‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
        return;
    }
    backupPassword = newPassword.trim() || null;
    saveToLocal(true); 
    
    if (backupPassword) {
        showToast('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    } else {
        showToast('‚úÖ ‡∏•‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    }
    
    document.getElementById('backup-password').value = '';
    document.getElementById('backup-password-confirm').value = '';
    renderBackupPasswordStatus();
}

function renderBackupPasswordStatus() {
    const statusEl = document.getElementById('password-status');
    if (backupPassword) {
        statusEl.textContent = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß';
        statusEl.style.color = 'green';
    } else {
        statusEl.textContent = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)';
        statusEl.style.color = '#f5a623';
    }
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
// ==============================================

function arrayBufferToBase64(buffer) { 
    let binary = ''; 
    const bytes = new Uint8Array(buffer); 
    const len = bytes.byteLength; 
    for (let i = 0; i < len; i++) { 
        binary += String.fromCharCode(bytes[i]); 
    } 
    return window.btoa(binary); 
}

function base64ToArrayBuffer(base64) { 
    const binary_string = window.atob(base64); 
    const len = binary_string.length; 
    const bytes = new Uint8Array(len); 
    for (let i = 0; i < len; i++) { 
        bytes[i] = binary_string.charCodeAt(i); 
    } 
    return bytes.buffer; 
}

async function deriveKey(password, salt) { 
    const enc = new TextEncoder(); 
    const keyMaterial = await window.crypto.subtle.importKey('raw', enc.encode(password), { name: 'PBKDF2' }, false, ['deriveKey']); 
    return window.crypto.subtle.deriveKey({ 
        "name": 'PBKDF2', 
        salt: salt, 
        "iterations": 100000, 
        "hash": 'SHA-256' 
    }, keyMaterial, { 
        "name": 'AES-GCM', 
        "length": 256 
    }, true, [ 
        "encrypt", 
        "decrypt" 
    ] ); 
}

async function encryptData(dataString, password) { 
    const salt = window.crypto.getRandomValues(new Uint8Array(16)); 
    const iv = window.crypto.getRandomValues(new Uint8Array(12)); 
    const key = await deriveKey(password, salt); 
    const enc = new TextEncoder(); 
    const encodedData = enc.encode(dataString); 
    const encryptedContent = await window.crypto.subtle.encrypt({ 
        name: 'AES-GCM', 
        iv: iv 
    }, key, encodedData); 
    return { 
        isEncrypted: true, 
        salt: arrayBufferToBase64(salt), 
        iv: arrayBufferToBase64(iv), 
        encryptedData: arrayBufferToBase64(encryptedContent) 
    }; 
}

async function decryptData(encryptedPayload, password) { 
    try { 
        const salt = base64ToArrayBuffer(encryptedPayload.salt); 
        const iv = base64ToArrayBuffer(encryptedPayload.iv); 
        const data = base64ToArrayBuffer(encryptedPayload.encryptedData); 
        const key = await deriveKey(password, salt); 
        const decryptedContent = await window.crypto.subtle.decrypt({ 
            name: 'AES-GCM', 
            iv: iv 
        }, key, data); 
        const dec = new TextDecoder(); 
        return dec.decode(decryptedContent); 
    } catch (e) { 
        console.error("Decryption failed:", e); 
        return null; 
    } 
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Summary ‡πÄ‡∏õ‡πá‡∏ô XLSX
// ==============================================

function exportSummaryToXlsx(summaryResult, title, dateString, remark, transactionDaysInfo = null, periodName) {
    const { summary, periodRecords, totalBalance } = summaryResult;
    
    const wb = XLSX.utils.book_new();
    
    let excelData = [];
    
    const summaryDateTime = new Date().toLocaleString("th-TH", { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit'
    }) + ' ‡∏ô.';
    
    excelData.push(['‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ']);
    excelData.push(['‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:', currentAccount]);
    excelData.push(['‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:', summaryDateTime]);
    excelData.push([`${title} :`, dateString]);
    excelData.push([]);
    
    if (transactionDaysInfo) {
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = transactionDaysInfo;
        const pElements = tempDiv.querySelectorAll('p');
        pElements.forEach(p => {
            excelData.push([p.innerText]);
        });
        excelData.push([]);
    }
    
    excelData.push(['‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö :', `${summary.incomeCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.totalIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó`]);
    for (const type in summary.income) {
        excelData.push([`- ${type} : ${summary.income[type].count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.income[type].amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`]);
    }
    excelData.push([]);
    
    excelData.push(['‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ :', `${summary.expenseCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.totalExpense.toLocaleString()} ‡∏ö‡∏≤‡∏ó`]);
    for (const type in summary.expense) {
        excelData.push([`- ${type} : ${summary.expense[type].count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ${summary.expense[type].amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`]);
    }
    excelData.push([]);
    
    const netAmount = summary.totalIncome - summary.totalExpense;
    let comparisonText = '';
    let comparisonColor = 'black';
    
    if (summary.totalIncome > summary.totalExpense) {
        comparisonText = `‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ = ${netAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        comparisonColor = 'blue';
    } else if (summary.totalIncome < summary.totalExpense) {
        comparisonText = `‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ = ${Math.abs(netAmount).toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
        comparisonColor = 'red';
    } else {
        comparisonText = '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢';
    }
    
    if (summary.totalIncome === 0 && summary.totalExpense === 0) {
        excelData.push(['‡∏™‡∏£‡∏∏‡∏õ :', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô']);
    } else {
        excelData.push(['‡∏™‡∏£‡∏∏‡∏õ :', comparisonText]);
    }
    
    if (periodName === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' || periodName.includes('‡∏ñ‡∏∂‡∏á')) {
        excelData.push(['‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ =', `${totalBalance.toLocaleString()} ‡∏ö‡∏≤‡∏ó`]);
    } else {
        excelData.push(['‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î =', `${totalBalance.toLocaleString()} ‡∏ö‡∏≤‡∏ó`]);
    }
    
    excelData.push(['‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° :', remark]);
    excelData.push([]);
    
    if (periodRecords.length > 0) {
        excelData.push(['--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° ---']);
        excelData.push(['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)']);
        
        periodRecords.forEach(record => {
            const { formattedDate, formattedTime } = formatDateForDisplay(record.dateTime);
            
            excelData.push([
                formattedDate, 
                formattedTime, 
                record.type, 
                record.description, 
                record.amount.toLocaleString()
            ]);
        });
    }
    
    const ws = XLSX.utils.aoa_to_sheet(excelData);
    
    const colWidths = [
        {wch: 15},
        {wch: 30},
        {wch: 15},
        {wch: 30},
        {wch: 20}
    ];
    ws['!cols'] = colWidths;
    
    ws['!pageSetup'] = {
        orientation: 'portrait',
        paperSize: 9,
        fitToPage: true,
        fitToWidth: 1,
        fitToHeight: 0,
        margins: {
            left: 0.7, right: 0.7,
            top: 0.75, bottom: 0.75,
            header: 0.3, footer: 0.3
        }
    };
    
    if (!ws['!merges']) ws['!merges'] = [];
    ws['!merges'].push({s: {r: 0, c: 0}, e: {r: 0, c: 4}});
    
    XLSX.utils.book_append_sheet(wb, ws, "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ");
    
    const fileName = `‡∏™‡∏£‡∏∏‡∏õ_${currentAccount}_${periodName}_${new Date().getTime()}.xlsx`;
    
    XLSX.writeFile(wb, fileName);
}

function applyExcelStyles(ws, data) {
    if (!ws['!merges']) ws['!merges'] = [];
    
    ws['!merges'].push({s: {r: 0, c: 0}, e: {r: 0, c: 4}});
    
    if (!ws['!cols']) ws['!cols'] = [];
    ws['!cols'][0] = {wch: 25};
    ws['!cols'][1] = {wch: 35};
    ws['!cols'][2] = {wch: 15};
    ws['!cols'][3] = {wch: 30};
    ws['!cols'][4] = {wch: 20};
    
    return ws;
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ PWA
// ==============================================

function hideInstallPrompt() { 
    const installGuide = document.getElementById('install-guide'); 
    if (installGuide) { 
        installGuide.style.display = 'none'; 
    } 
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
// ==============================================

function validateDateRangeInput() {
    const startDateStr = document.getElementById('exportStartDate').value;
    const endDateStr = document.getElementById('exportEndDate').value;
    
    if (!startDateStr || !endDateStr) {
        return { isValid: false, message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î" };
    }
    
    const startDate = new Date(startDateStr);
    const endDate = new Date(endDateStr);
    
    if (startDate > endDate) {
        return { isValid: false, message: "‚ùå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î" };
    }
    
    return { 
        isValid: true, 
        startDateStr, 
        endDateStr, 
        startDate, 
        endDate: new Date(endDate.setHours(23, 59, 59, 999))
    };
}

function filterRecordsByDateRange(startDate, endDate) {
    return records.filter(record => {
        if (record.account !== currentAccount) return false;
        
        const recordDate = parseLocalDateTime(record.dateTime);
        return recordDate >= startDate && recordDate <= endDate;
    });
}

function showNoDataAlert(startDateStr, endDateStr) {
    showToast(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ "${currentAccount}" ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${startDateStr} ‡∏ñ‡∏∂‡∏á ${endDateStr}`, 'error');
}

// ==============================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
// ==============================================

window.onload = function () {
    document.getElementById('detailsSection').style.display = 'none';
    loadFromLocal();
    toggleSection('account-section');
    
    document.getElementById('backup-password-form').addEventListener('submit', saveBackupPassword);
    document.getElementById('show-backup-password').addEventListener('change', (e) => {
        document.getElementById('backup-password').type = e.target.checked ? 'text' : 'password';
        document.getElementById('backup-password-confirm').type = e.target.checked ? 'text' : 'password';
    });
    
    window.addEventListener('click', (event) => {
        const modal = document.getElementById('summaryModal');
        if (event.target == modal) { 
            closeSummaryModal(); 
        }
    });
    
    if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone || localStorage.getItem('pwa_installed') === 'true') {
        hideInstallPrompt();
    }
    
    console.log('Menu functions loaded:', {
        toggleMainSection: typeof toggleMainSection,
        toggleSubSection: typeof toggleSubSection
    });
    
    setTimeout(() => {
        toggleMainSection('account-section');
    }, 100);
};

if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('./sw.js').then(registration => {
            console.log('ServiceWorker registration successful with scope: ', registration.scope);
        }, err => {
            console.log('ServiceWorker registration failed: ', err);
        });
    });
}

window.addEventListener('appinstalled', () => { 
    console.log('App was installed.'); 
    hideInstallPrompt(); 
    localStorage.setItem('pwa_installed', 'true'); 
    showToast('‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
});